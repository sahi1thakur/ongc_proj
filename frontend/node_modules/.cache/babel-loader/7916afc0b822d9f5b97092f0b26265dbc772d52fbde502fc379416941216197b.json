{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAHIL THAKUR\\\\OneDrive\\\\Desktop\\\\_as'\\\\prototype\\\\frontend\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  // State to store user's selected options for each question\n  const [selectedOptions, setSelectedOptions] = useState({});\n\n  // Example questions (you can replace these with your actual questions)\n  const questions = [{\n    id: 1,\n    text: 'What is the capital of France?',\n    options: ['Berlin', 'Madrid', 'Paris', 'Lisbon']\n  }, {\n    id: 2,\n    text: 'What is 2 + 2?',\n    options: ['3', '4', '5', '6']\n  }\n  // ... add more questions as needed\n  ];\n\n  // Function to handle option change\n  const handleOptionChange = (questionId, option) => {\n    setSelectedOptions({\n      ...selectedOptions,\n      [questionId]: option\n    });\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      // Iterate over the selected options and send them to the server\n      for (const [questionId, selectedOption] of Object.entries(selectedOptions)) {\n        const response = await fetch('/api/submit', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            question: questionId,\n            selectedOption\n          })\n        });\n        if (!response.ok) {\n          const error = await response.text();\n          throw new Error(error);\n        }\n      }\n\n      // If all responses are submitted successfully\n      alert('Quiz submitted successfully!');\n    } catch (error) {\n      // Handle any errors that occur during submission\n      console.error('Failed to submit quiz:', error);\n      alert('Failed to submit quiz. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${question.id}`,\n            value: option,\n            onChange: () => handleOptionChange(question.id, option),\n            checked: selectedOptions[question.id] === option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this), option]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"dLRHIO/SyIp9lHMf8Crrz2iKqk4=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Quiz","_s","selectedOptions","setSelectedOptions","questions","id","text","options","handleOptionChange","questionId","option","handleSubmit","event","preventDefault","selectedOption","Object","entries","response","fetch","method","headers","body","JSON","stringify","question","ok","error","Error","alert","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","type","name","value","onChange","checked","_c","$RefreshReg$"],"sources":["C:/Users/SAHIL THAKUR/OneDrive/Desktop/_as'/prototype/frontend/src/components/Quiz.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Quiz() {\r\n    // State to store user's selected options for each question\r\n    const [selectedOptions, setSelectedOptions] = useState({});\r\n\r\n    // Example questions (you can replace these with your actual questions)\r\n    const questions = [\r\n        {\r\n            id: 1,\r\n            text: 'What is the capital of France?',\r\n            options: ['Berlin', 'Madrid', 'Paris', 'Lisbon'],\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'What is 2 + 2?',\r\n            options: ['3', '4', '5', '6'],\r\n        },\r\n        // ... add more questions as needed\r\n    ];\r\n\r\n    // Function to handle option change\r\n    const handleOptionChange = (questionId, option) => {\r\n        setSelectedOptions({\r\n            ...selectedOptions,\r\n            [questionId]: option,\r\n        });\r\n    };\r\n\r\n    // Function to handle form submission\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            // Iterate over the selected options and send them to the server\r\n            for (const [questionId, selectedOption] of Object.entries(selectedOptions)) {\r\n                const response = await fetch('/api/submit', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ question: questionId, selectedOption }),\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    const error = await response.text();\r\n                    throw new Error(error);\r\n                }\r\n            }\r\n\r\n            // If all responses are submitted successfully\r\n            alert('Quiz submitted successfully!');\r\n        } catch (error) {\r\n            // Handle any errors that occur during submission\r\n            console.error('Failed to submit quiz:', error);\r\n            alert('Failed to submit quiz. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Quiz</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                {questions.map((question) => (\r\n                    <div key={question.id}>\r\n                        <h2>{question.text}</h2>\r\n                        {question.options.map((option) => (\r\n                            <label key={option}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name={`question-${question.id}`}\r\n                                    value={option}\r\n                                    onChange={() => handleOptionChange(question.id, option)}\r\n                                    checked={selectedOptions[question.id] === option}\r\n                                />\r\n                                {option}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n                <button type=\"submit\">Submit Quiz</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}