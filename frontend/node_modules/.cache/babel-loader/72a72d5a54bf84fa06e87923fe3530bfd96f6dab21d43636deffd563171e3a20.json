{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAHIL THAKUR\\\\OneDrive\\\\Desktop\\\\_as'\\\\prototype\\\\frontend\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [responses, setResponses] = useState({});\n  const [submitStatus, setSubmitStatus] = useState('');\n  const questions = [{\n    id: 1,\n    question: 'What is the capital of France?',\n    options: ['Berlin', 'Madrid', 'Paris', 'Lisbon']\n  }, {\n    id: 2,\n    question: 'What is 2 + 2?',\n    options: ['3', '4', '5', '6']\n  }\n  // Add more questions as needed\n  ];\n  const handleOptionChange = (questionId, selectedOption) => {\n    setResponses(prevResponses => ({\n      ...prevResponses,\n      [questionId]: selectedOption\n    }));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      for (const [questionId, selectedOption] of Object.entries(responses)) {\n        const response = await fetch('/api/submit', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            question: questionId,\n            selectedOption\n          })\n        });\n        const result = await response.json();\n        if (!response.ok) throw new Error(result.message);\n      }\n      setSubmitStatus('Responses submitted successfully!');\n    } catch (error) {\n      setSubmitStatus(`Failed to submit responses: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [questions.map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: q.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), q.options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${q.id}`,\n            value: option,\n            onChange: () => handleOptionChange(q.id, option),\n            checked: responses[q.id] === option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this), option]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this))]\n      }, q.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), submitStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"CkE8oQh2ZKgwSOUHYVx4sBtWNIM=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Quiz","_s","responses","setResponses","submitStatus","setSubmitStatus","questions","id","question","options","handleOptionChange","questionId","selectedOption","prevResponses","handleSubmit","event","preventDefault","Object","entries","response","fetch","method","headers","body","JSON","stringify","result","json","ok","Error","message","error","children","onSubmit","map","q","fileName","_jsxFileName","lineNumber","columnNumber","option","type","name","value","onChange","checked","_c","$RefreshReg$"],"sources":["C:/Users/SAHIL THAKUR/OneDrive/Desktop/_as'/prototype/frontend/src/components/Quiz.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Quiz() {\r\n    const [responses, setResponses] = useState({});\r\n    const [submitStatus, setSubmitStatus] = useState('');\r\n\r\n    const questions = [\r\n        {\r\n            id: 1,\r\n            question: 'What is the capital of France?',\r\n            options: ['Berlin', 'Madrid', 'Paris', 'Lisbon'],\r\n        },\r\n        {\r\n            id: 2,\r\n            question: 'What is 2 + 2?',\r\n            options: ['3', '4', '5', '6'],\r\n        }\r\n        // Add more questions as needed\r\n    ];\r\n\r\n    const handleOptionChange = (questionId, selectedOption) => {\r\n        setResponses(prevResponses => ({\r\n            ...prevResponses,\r\n            [questionId]: selectedOption\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            for (const [questionId, selectedOption] of Object.entries(responses)) {\r\n                const response = await fetch('/api/submit', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ question: questionId, selectedOption }),\r\n                });\r\n                const result = await response.json();\r\n                if (!response.ok) throw new Error(result.message);\r\n            }\r\n            setSubmitStatus('Responses submitted successfully!');\r\n        } catch (error) {\r\n            setSubmitStatus(`Failed to submit responses: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                {questions.map((q) => (\r\n                    <div key={q.id}>\r\n                        <h2>{q.question}</h2>\r\n                        {q.options.map((option) => (\r\n                            <label key={option}>\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    name={`question-${q.id}`} \r\n                                    value={option} \r\n                                    onChange={() => handleOptionChange(q.id, option)}\r\n                                    checked={responses[q.id] === option}\r\n                                />\r\n                                {option}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n                <button type=\"submit\">Submit Quiz</button>\r\n            </form>\r\n            {submitStatus && <p>{submitStatus}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}